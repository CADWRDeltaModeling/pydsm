{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e50f8e2",
   "metadata": {},
   "source": [
    "#  Time stamps, Periods HEC convention\n",
    "\n",
    "HEC (and perhaps others) timestamp the data to the next time to indicate time from the start to end (including the end)\n",
    "\n",
    "In pandas, this is handled by differentiating between time stamp ( a point in time ) to time period ( a period of time). Furthermore, in pandas the period of time is closed at the start by default as opposed to end as it is in HEC\n",
    "\n",
    "## Time formats (standards and military conventions)\n",
    "\n",
    "ISO 8601 is a standard for date and times. Read this for [duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) and [time interval](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals)\n",
    "\n",
    "An important distinction is that there is 2400 for HHmm (hour/minutes) representation in the [ISO 8601 standards](https://en.wikipedia.org/wiki/ISO_8601#Times) however HEC-DSS stores the midnight with a 2400 designation and that is reflected in their libraries ability to parse that timestamp to the midnight of the next day. In summary 2400 is interpreted as midnight (0000) of the next day.\n",
    "\n",
    "Infact that is now explicitly disallowed\n",
    "```\n",
    "Earlier versions of the standard allowed \"24:00\" corresponding to the end of a day, \n",
    "but this is explicitly disallowed by the 2019 revision.\n",
    "```\n",
    "\n",
    "Military time allows for 2400 and this is interpreted as 0000 of the next day. See this [wikipedia reference](https://en.wikipedia.org/wiki/24-hour_clock#Midnight_00:00_and_24:00)\n",
    "\n",
    "## Period and Instantaneous data types\n",
    "\n",
    "HEC-DSS reads the data, its units and a string representing the interval type as either starting with \"INST\" for instantaneous or \"PER\" for period data. \n",
    "\n",
    "For regularly sampled time series in HEC is either INST-VAL (timestamped) or PER-AVER (or just PER- prefixed) to designated period data.\n",
    "\n",
    "pyhecdss reads the \"INST\" data as is into a timestamp indexed data. \n",
    "\n",
    "However for \"PER\" data, the time stamp is moved to the left ( backwards ) by the length of the period and the data returned is period indexed. E.g. 31JAN1991 2400 for monthly data is interpreted as 01JAN1991 by first moving the 31JAN1991 2400 timestamp to 31DEC1990 2400 (i.e. 1 month) and then interpreted as the timestamp which is 01JAN1991 0000 and then converted to a period with 1 month interval which is the period 01JAN1991\n",
    "The reverse is applied to period data on writes.\n",
    "\n",
    "## Period operations\n",
    "\n",
    "If you use the default conventions (pandas), the timestamps for a particular period include the start and not the end. For HEC style (or end of timestamp data), you should use the closed=\"right\" when [resampling (pandas function)](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling) the data\n",
    "\n",
    "One catch is to use kind=\"timestamp\" and the convert back with to_period() (pandas function).\n",
    "\n",
    "**TLDR; just use the pydsm.functions tsmath module which has functions for per_aver, per_max, per_min**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56c86037",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T17:59:19.990634Z",
     "start_time": "2021-12-20T17:59:06.831257Z"
    }
   },
   "outputs": [],
   "source": [
    "import pyhecdss\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pydsm\n",
    "from pydsm.functions import tsmath"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309bd568",
   "metadata": {},
   "source": [
    "A function to generate a simple increasing time series from 0 -> 99 with timestamps regularly placed at 1 hour intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7389ce2e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T17:59:20.072520Z",
     "start_time": "2021-12-20T17:59:19.990634Z"
    }
   },
   "outputs": [],
   "source": [
    "def linear_timeseries():\n",
    "    '''\n",
    "    A simple increasing time series to use for averaging functions\n",
    "    ```\n",
    "    01JAN2000 0100 - 0\n",
    "    01JAN2000 0200 - 1\n",
    "    ....\n",
    "    01JAN2000 2200 - 21\n",
    "    01JAN2000 2300 - 22\n",
    "    02JAN2000 0000 - 23\n",
    "    ```\n",
    "    '''\n",
    "    nvals=100\n",
    "    return pd.DataFrame(np.arange(0,nvals), columns=['values'], index=pd.date_range(start='01JAN2000 0100',periods=nvals,freq='H'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6343ccc9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T17:59:20.197736Z",
     "start_time": "2021-12-20T17:59:20.073516Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01 01:00:00</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 02:00:00</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 03:00:00</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 04:00:00</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 05:00:00</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 00:00:00</th>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 01:00:00</th>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 02:00:00</th>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 03:00:00</th>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05 04:00:00</th>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     values\n",
       "2000-01-01 01:00:00       0\n",
       "2000-01-01 02:00:00       1\n",
       "2000-01-01 03:00:00       2\n",
       "2000-01-01 04:00:00       3\n",
       "2000-01-01 05:00:00       4\n",
       "...                     ...\n",
       "2000-01-05 00:00:00      95\n",
       "2000-01-05 01:00:00      96\n",
       "2000-01-05 02:00:00      97\n",
       "2000-01-05 03:00:00      98\n",
       "2000-01-05 04:00:00      99\n",
       "\n",
       "[100 rows x 1 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts=linear_timeseries()\n",
    "ts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "332f1030",
   "metadata": {},
   "source": [
    "Use the tsmath modules per_aver, per_max or per_min functions to get the average, max and min respectively in the HEC convention\n",
    "The interval is passed to pandas [resample](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling) and should be DateOffset, Timedelta or str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3db02e2f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T17:59:20.307063Z",
     "start_time": "2021-12-20T17:59:20.200724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01</th>\n",
       "      <td>11.5</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-02</th>\n",
       "      <td>35.5</td>\n",
       "      <td>47</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-03</th>\n",
       "      <td>59.5</td>\n",
       "      <td>71</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-04</th>\n",
       "      <td>83.5</td>\n",
       "      <td>95</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05</th>\n",
       "      <td>97.5</td>\n",
       "      <td>99</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             avg  max  min\n",
       "2000-01-01  11.5   23    0\n",
       "2000-01-02  35.5   47   24\n",
       "2000-01-03  59.5   71   48\n",
       "2000-01-04  83.5   95   72\n",
       "2000-01-05  97.5   99   96"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfall = pd.concat([tsmath.per_aver(ts.to_period(), interval='D'),\n",
    "           tsmath.per_max(ts, interval='D'),\n",
    "           tsmath.per_min(ts, interval='D')], axis=1)\n",
    "dfall.columns=['avg','max','min']\n",
    "dfall"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f77af4a1",
   "metadata": {},
   "source": [
    "Storing these time series in DSS and retrieving this is demoed below"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b43b45b4",
   "metadata": {},
   "source": [
    "HECDSS api only supported for double type so convert to doubles first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "845ccc76",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T17:59:20.392442Z",
     "start_time": "2021-12-20T17:59:20.309052Z"
    }
   },
   "outputs": [],
   "source": [
    "ts=ts.astype('double')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "19515c92",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:00:04.400394Z",
     "start_time": "2021-12-20T18:00:04.310250Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.remove('hecavg.dss')\n",
    "with pyhecdss.DSSFile('hecavg.dss',create_new=True) as d:\n",
    "    d.write_rts('/AVG/TS/C//1HOUR/F/',ts,'unk','INST-VAL')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "00b6ff11",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:00:08.994122Z",
     "start_time": "2021-12-20T18:00:08.905312Z"
    }
   },
   "outputs": [],
   "source": [
    "ts_avg = tsmath.per_aver(ts,'1D')\n",
    "ts_max = tsmath.per_max(ts,'1D')\n",
    "ts_min = tsmath.per_min(ts, '1D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b22e4a4b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:00:09.650826Z",
     "start_time": "2021-12-20T18:00:09.564509Z"
    }
   },
   "outputs": [],
   "source": [
    "with pyhecdss.DSSFile('hecavg.dss') as d:\n",
    "    d.write_rts('/AVG/TS/C-PER-AVER//1DAY/F/',ts_avg,'unk','PER-AVER')\n",
    "    d.write_rts('/AVG/TS/C-PER-MAX//1DAY/F/',ts_max,'unk','PER-AVER')\n",
    "    d.write_rts('/AVG/TS/C-PER-MIN//1DAY/F/',ts_min,'unk','PER-AVER')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8fb115e7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:00:10.712493Z",
     "start_time": "2021-12-20T18:00:10.596895Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Units:  unk  | Period Type:  PER-AVER\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>/AVG/TS/C-PER-AVER/01JAN2000 - 01JAN2000/1DAY/F/</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01</th>\n",
       "      <td>11.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-02</th>\n",
       "      <td>35.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-03</th>\n",
       "      <td>59.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-04</th>\n",
       "      <td>83.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05</th>\n",
       "      <td>97.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            /AVG/TS/C-PER-AVER/01JAN2000 - 01JAN2000/1DAY/F/\n",
       "2000-01-01                                              11.5\n",
       "2000-01-02                                              35.5\n",
       "2000-01-03                                              59.5\n",
       "2000-01-04                                              83.5\n",
       "2000-01-05                                              97.5"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matching = pyhecdss.get_ts('hecavg.dss','/AVG/TS/C-PER-AVER//1DAY/F/')\n",
    "ts_avg_read=next(matching)\n",
    "print('Units: ',ts_avg_read.units, ' | Period Type: ',ts_avg_read.period_type)\n",
    "ts_avg_read.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "49dbc722",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:00:15.633644Z",
     "start_time": "2021-12-20T18:00:15.555457Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "      <th>/AVG/TS/C-PER-AVER/01JAN2000 - 01JAN2000/1DAY/F/</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01</th>\n",
       "      <td>11.5</td>\n",
       "      <td>11.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-02</th>\n",
       "      <td>35.5</td>\n",
       "      <td>35.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-03</th>\n",
       "      <td>59.5</td>\n",
       "      <td>59.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-04</th>\n",
       "      <td>83.5</td>\n",
       "      <td>83.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05</th>\n",
       "      <td>97.5</td>\n",
       "      <td>97.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            values  /AVG/TS/C-PER-AVER/01JAN2000 - 01JAN2000/1DAY/F/\n",
       "2000-01-01    11.5                                              11.5\n",
       "2000-01-02    35.5                                              35.5\n",
       "2000-01-03    59.5                                              59.5\n",
       "2000-01-04    83.5                                              83.5\n",
       "2000-01-05    97.5                                              97.5"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat([ts_avg,ts_avg_read.data],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86d0505a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:05:00.407449Z",
     "start_time": "2021-12-20T18:05:00.253591Z"
    }
   },
   "source": [
    "A slightly more detailed explanation is below\n",
    "The [resample](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling) function is used with particular options to conform to the HEC convention. \n",
    "\n",
    "For example below you can use the other grouping functions with resample to do other operations with these conventions\n",
    "The resample_hec_style() function is a convenience for call resample with the hec conventions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "84694c06",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-20T18:31:02.557736Z",
     "start_time": "2021-12-20T18:31:02.454951Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01</th>\n",
       "      <td>276.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-02</th>\n",
       "      <td>852.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-03</th>\n",
       "      <td>1428.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-04</th>\n",
       "      <td>2004.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05</th>\n",
       "      <td>390.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            values\n",
       "2000-01-01   276.0\n",
       "2000-01-02   852.0\n",
       "2000-01-03  1428.0\n",
       "2000-01-04  2004.0\n",
       "2000-01-05   390.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts.resample('1D', closed='right',kind='timestamp').sum().to_period()\n",
    "tsmath.resample_hec_style(ts,'1D').sum().to_period()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0544c030",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:dev_pydsm]",
   "language": "python",
   "name": "conda-env-dev_pydsm-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
