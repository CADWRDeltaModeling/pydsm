{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DSM2 as a network\n",
    "\n",
    "DSM2 is a network (graph theory) of junctions and reservoirs with connections of either channels, reservoir connections or gates. In this view of DSM2 the input tables that represent the hydrodynamic network can be represented as a mathematical graph.\n",
    "\n",
    "This view allows some interesting questions to be asked and answered. \n",
    "\n",
    "E.g.\n",
    "* What is the shortest path from one node to another? (if it exists)\n",
    "* What nodes are downstream of this node?\n",
    "* What nodes are upstream of this node?\n",
    "* ... and many more graph related information\n",
    "\n",
    "For illustrating this concept, this notebook shows how the tables can be easily converted to a graph using networkx package and answering some these interesting questions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pydsm.input import parser, network\n",
    "import networkx as nx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read in input file\n",
    "Open the hydro echo file and read it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fname='../../tests/data/hydro_echo_historical_v82.inp'\n",
    "with open(fname, 'r') as file:\n",
    "    tables = parser.parse(file.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert to a graph network \n",
    "\n",
    "The channel tables contain upnode and downnode connections. \n",
    "\n",
    "The reservoir_connection table contains the nodes to which the reservoirs connect. \n",
    "\n",
    "These can be used to construct a directed graph network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = tables['CHANNEL']\n",
    "gc = nx.from_pandas_edgelist(c, source='UPNODE', target='DOWNNODE', edge_attr=list(\n",
    "     c.columns), create_using=nx.MultiDiGraph)\n",
    "rc = tables['RESERVOIR_CONNECTION']\n",
    "grc1 = nx.from_pandas_edgelist(rc, source='RES_NAME', target='NODE', edge_attr=list(\n",
    "     rc.columns), create_using=nx.MultiDiGraph)\n",
    "grc2 = nx.from_pandas_edgelist(rc, source='NODE', target='RES_NAME', edge_attr=list(\n",
    "     rc.columns), create_using=nx.MultiDiGraph)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drawing graph networks\n",
    "Some examples of what these graphs construted from tables look like..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reservoir connections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx.draw(grc1, arrows=True, with_labels=True, pos=nx.spring_layout(grc1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combine the directed reservoir node connection graphs (one for incoming and other for outgoing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grc=nx.compose(grc1,grc2)\n",
    "nx.draw(grc, arrows=True, with_labels=True, pos=nx.spring_layout(grc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combine reservoir connections and channel table for a complete graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gall=nx.compose(gc,grc)\n",
    "nx.draw(gall, arrows=True, with_labels=True, pos=nx.spring_layout(gall))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the pydsm.input.network module to encapsulate the building in one method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "g=network.build_network(tables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx.draw(g,arrows=True, with_labels=True, pos=nx.spring_layout(g))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Utilizing graph information\n",
    "You can leverage the graph theory to charaterize DSM2's flow network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Is this graph strongly connected? :',nx.is_strongly_connected(gall))\n",
    "print('Number of strongly connected components: ', nx.number_strongly_connected_components(gall))\n",
    "print('Is this graph weakly connected? :',nx.is_weakly_connected(gall))\n",
    "print('Number of weakly connected components: ', nx.number_weakly_connected_components(gall))\n",
    "print('Weakly connected components: ', list(nx.weakly_connected_components(gall)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show all the shortest paths between two nodes\n",
    "E.g. in this case it is node 17 ( the San Joaquin River boundary) and the 361 (Martinez) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(list(nx.all_shortest_paths(gall,17,361)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### or between node and reservoir\n",
    "or show the shortest paths between a reservoir and a node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(list(nx.all_shortest_paths(gall,'liberty',361)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use holoviews visualization library for zoom and pan around functionality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import hvplot.networkx as hvnx\n",
    "hvnx.draw_spring(gall, labels='index', width=900, height=600)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Graph Info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(nx.info(gall))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test that  all nodes connect to 361 (Boundary) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "outputPrepend"
    ]
   },
   "outputs": [],
   "source": [
    "print('Limiting print to first 5 nodes')\n",
    "for node in list(gall.nodes)[0:5]:\n",
    "    print(list(nx.shortest_path(gall,node,361)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test that not all nodes are connected to node 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    for node in gall.nodes:\n",
    "        print(list(nx.shortest_path(gall,node,1)))\n",
    "    print('Test failed. Every node is connected to 1')\n",
    "except Exception as e:\n",
    "    print(e) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx.is_directed_acyclic_graph(gall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx.flow_hierarchy(gall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(nx.neighbors(gall,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(nx.neighbors(gall,'mildred'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(nx.neighbors(gall,'franks_tract'))"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "db7c19f4a439e5789451de0a908f63cf1cf9873bacb97bdd6cf888b60f976b5c"
  },
  "kernelspec": {
   "display_name": "Python 3.7.6 64-bit ('dev_pydsm': conda)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
